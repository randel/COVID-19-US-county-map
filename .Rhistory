NDE.all[i, j] = mean(results[, "NDE"])
NIE.all[i, j] = mean(results[, "NIE"])
SE_NDE.all[i, j] = sqrt(mean(results[, "SE_NDE"]^2) + (1 + 1/nsim) * var(results[, "NDE"]))
SE_NIE.all[i, j] = sqrt(mean(results[, "SE_NIE"]^2) + (1 + 1/nsim) * var(results[, "NIE"]))
P_NDE.all[i, j] = (1 - pnorm(abs(NDE.all[i, j]/SE_NDE.all[i, j]))) * 2
P_NIE.all[i, j] = (1 - pnorm(abs(NIE.all[i, j]/SE_NIE.all[i, j]))) * 2
cat("Completed ", cell, " of ", grid.b.m * grid.b.y, " cells.\n")
}
}
results.new = list(NDE = NDE.all, NIE = NIE.all, SE_NDE = SE_NDE.all, SE_NIE = SE_NIE.all, P_NDE = P_NDE.all, P_NIE = P_NIE.all)
return(list(results.old = results.old, X.coef.plot = X.coef.plot, range.b.m = range.b.m, range.b.y = range.b.y, b.y.all = b.y.all, b.m.all = b.m.all, results.new = results.new))
}
sens.plot = function(sens.results, effect = "NIE", est){
plot(sens.results$X.coef.plot[, 1], sens.results$X.coef.plot[, 2], pch = 19, xlim = sens.results$range.b.m, ylim = sens.results$range.b.y, xlab = "Partial Effect of U on logit of Pr(M=1)", ylab="Partial Effect of U on Y", main = paste("Sensitivity Analysis for", effect, "(", est, ")"))
abline(h = 0, lty = 2)
abline(v = 0, lty = 2)
contour(sens.results$b.m.all, sens.results$b.y.all, sens.results$results.new[[effect]], add = T, labcex = 1)
# Add curves that represent the contour along which the treatment effect estimate is reduced to zero
contour(sens.results$b.m.all, sens.results$b.y.all, sens.results$results.new[[effect]], levels = 0, add = T, col = "red", lwd = 2, lty = 2, labcex = 1)
# Add curves for significance change
contour(sens.results$b.m.all, sens.results$b.y.all, sens.results$results.new[[effect]]/sens.results$results.new[[paste0("SE_", effect)]], levels = c(-1, 1) * qnorm(0.05/2), labels = "Sig.Change", add = T, col = "blue", lwd = 2, lty = 3, labcex = 1)
}
# p.u = 0.1
sens.results.1 = sens(y = y, t = t, m = m, X = X, range.b.m = c(-4, 4), range.b.y = c(-1.5, 1.5), grid.b.y = 20, grid.b.m = 20, p.u = 0.1, iter = 10, nsim = 1000, est = "reg_vand", data = data)
sens.plot(sens.results.1, "NDE", "vand")
sens.plot(sens.results.1, "NIE", "vand")
sava.image(file = 'xu.1.rdata')
save.image(file = 'xu.1.rdata')
library(Seurat)
?CreateSeuratObject
devtools::install_github('randel/cellmix/pkg/CellMix')
load("C:/Users/jbwang/Box/Wei/data/suerat_integrate.rdata")
library(Seurat)
skin_integrated <- IntegrateData(anchorset = skin_anchors, dims = 1:30)
gc()
skin_integrated <- IntegrateData(anchorset = skin_anchors, dims = 1:30)
library(DSA)
load("C:/Users/jbwang/Box/meth/meth_deconv_7cell.rdata")
rownames(meth_brandon)[1]
gene_mark_ls_bs = sapply(unique(vel_marker_df$cell), function(k) unique(vel_marker_df$bulk_pos[vel_marker_df$cell==k]))
table(vel_marker_df$cell)
gene_mark_ls_bs = sapply(unique(vel_marker_df$cell), function(k) unique(vel_marker_df$bulk_rownames[vel_marker_df$cell==k]))
cellmix = function(gene_mark_ls, meth_bulk, method = "DSA") {
require(CellMix)
ML = CellMix::MarkerList()
ML@.Data <- gene_mark_ls #tapply(as.character(md$gene), as.character(md$CT), list)
RESULTS = CellMix::ged(meth_bulk, ML, method = method, log = FALSE)@fit@H
RESULTS = apply(RESULTS,2,function(x) ifelse(x < 0, 0, x)) #explicit non-negativity constraint
RESULTS = apply(RESULTS,2,function(x) x/sum(x)) #explicit STO constraint
print(round(colMeans(RESULTS), 2))
}
cellmix(gene_mark_ls_bs, meth_bs[(unlist(gene_mark_ls_bs)),], method = "DSA")
# on Windows: cannot install the source version on server
# install.packages('C:/Users/jbwang/Downloads/DSA_1.0.zip', repos = NULL, type = 'win.binary')
library(DSA)
library(CellMix)
cellmix(gene_mark_ls_bs, meth_bs[(unlist(gene_mark_ls_bs)),], method = "DSA")
library(DelayedMatrixStats)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("DelayedMatrixStats")
library(DelayedMatrixStats)
cellmix(gene_mark_ls_bs, meth_bs[(unlist(gene_mark_ls_bs)),], method = "DSA")
install.packages("BiocInstaller", repos="http://bioconductor.org/packages/3.7/bioc/")
system('wget http://web.cbio.uct.ac.za/~renaud/CRAN/src/contrib/CellMix_1.6.2.tar.gz')
system("R CMD INSTALL CellMix_1.6.2.tar.gz")
load("C:/Users/jbwang/Box/Chris/data/PBMCdata.RData")
load("C:/Users/jbwang/Downloads/PBMCdata.RData")
load("C:/Users/jbwang/Downloads/PBMCdata (1).RData")
library(raster)
library(leaflet)
library(viridis)
# Get USA polygon data
USA <- getData("GADM", country = "usa", level = 2)
USA$state = substr(USA$HASC_2, 4,5)
dat = read.csv('https://github.com/CSSEGISandData/COVID-19/raw/master/csse_covid_19_data/csse_covid_19_time_series/time_series_19-covid-Confirmed.csv',
stringsAsFactors = F)
dat = dat[dat$Country.Region == 'US',]
dat = dat[-grep('Unassigned', dat$Province.State),]
dat = dat[-grep('Unknown', dat$Province.State),]
dat = dat[dat[,ncol(dat)] != 0,]
mydata <- data.frame(state = dat$Province.State,
county = dat$Province.State,
value = dat[,ncol(dat)],
stringsAsFactors = FALSE)
mydata$state = sapply(mydata$county, function(x) unlist(strsplit(x, ', '))[2])
mydata$state = gsub('[.]', '', mydata$state)
mydata$county = sapply(mydata$county, function(x) unlist(strsplit(x, ', '))[1])
mydata$county = gsub(' County', '', mydata$county)
mydata = na.omit(mydata)
mydata$county[mydata$county == 'Washington' & mydata$state == 'DC'] = 'District of Columbia'
# I do not know how your actual data is like. In this demonstration,
# I have data points for Adair in Iowa and Oklahoma. So
USA = USA[!USA$state %in% c('AK', 'HI'),]
temp <- merge(USA, mydata,
by.x = c("state", "NAME_2"), by.y = c("state", "county"),
all.x = TRUE)
temp$value[is.na(temp$value)] = 0
# Create a color palette
mypal <- colorBin(palette = "Reds", bins = sort(unique(mydata$value)), domain = temp$value, na.color = NA) #colorQuantile("Reds", NULL, n = 5) # #
paste0(temp$NAME_2, ', ', temp$state)[1]
leaflet() %>%
# addProviderTiles("OpenStreetMap.Mapnik") %>% #addTiles() %>%
# setView(lat = 39.8283, lng = -98.5795, zoom = 4) %>%
addPolygons(data = USA, stroke = T, smoothFactor = 0.2, fillOpacity = 0.8,
fillColor = ~mypal(temp$value), color = "#BDBDC3", weight = 1,
popup = paste("County: ", paste0(temp$NAME_2, ', ', temp$state), "<br>",
"Cases: ", temp$value, "<br>")) %>%
addLegend(position = "bottomleft", pal = mypal, values = temp$value,
title = "Cases",
opacity = 1)
View(mydata)
leaflet() %>%
addProviderTiles("OpenStreetMap.Mapnik") %>% #addTiles() %>%
# setView(lat = 39.8283, lng = -98.5795, zoom = 4) %>%
addPolygons(data = USA, stroke = T, smoothFactor = 0.2, fillOpacity = 0.8,
fillColor = ~mypal(temp$value), color = "#BDBDC3", weight = 1,
popup = paste("County: ", paste0(temp$NAME_2, ', ', temp$state), "<br>",
"Cases: ", temp$value, "<br>")) %>%
addLegend(position = "bottomleft", pal = mypal, values = temp$value,
title = "Cases",
opacity = 1)
1+1
dat = read.csv('https://github.com/CSSEGISandData/COVID-19/raw/master/csse_covid_19_data/csse_covid_19_time_series/time_series_19-covid-Confirmed.csv',
stringsAsFactors = F)
dat = dat[dat$Country.Region == 'US',]
sum(dat[,ncol(dat)])
dat = dat[-grep('Unassigned', dat$Province.State),]
sum(dat[,ncol(dat)])
dat = read.csv('https://github.com/CSSEGISandData/COVID-19/raw/master/csse_covid_19_data/csse_covid_19_time_series/time_series_19-covid-Confirmed.csv',
stringsAsFactors = F)
dat = dat[dat$Country.Region == 'US',]
View(dat)
dat = dat[-grep('Unknown', dat$Province.State),]
sum(dat[,ncol(dat)])
dat = read.csv('https://github.com/CSSEGISandData/COVID-19/raw/master/csse_covid_19_data/csse_covid_19_time_series/time_series_19-covid-Confirmed.csv',
stringsAsFactors = F)
dat = dat[dat$Country.Region == 'US',]
dat = dat[-grep('Unassigned', dat$Province.State),]
dat = dat[-grep('Unknown', dat$Province.State),]
sum(dat[,ncol(dat)])
dat = dat[dat[,ncol(dat)] != 0,]
mydata <- data.frame(state = dat$Province.State,
county = dat$Province.State,
value = dat[,ncol(dat)],
stringsAsFactors = FALSE)
mydata$state = sapply(mydata$county, function(x) unlist(strsplit(x, ', '))[2])
mydata$state = gsub('[.]', '', mydata$state)
mydata$county = sapply(mydata$county, function(x) unlist(strsplit(x, ', '))[1])
mydata$county = gsub(' County', '', mydata$county)
mydata$county = gsub(' ', '', mydata$county)
mydata = na.omit(mydata)
mydata$county[mydata$county == 'Washington' & mydata$state == 'DC'] = 'District of Columbia'
temp <- merge(USA, mydata,
by.x = c("state", "NAME_2"), by.y = c("state", "county"),
all.x = TRUE)
temp$value[is.na(temp$value)] = 0
# Create a color palette
mypal <- colorBin(palette = "Reds", bins = sort(unique(mydata$value)), domain = temp$value, na.color = NA) #colorQuantile("Reds", NULL, n = 5) # #
leaflet() %>%
addProviderTiles("OpenStreetMap.Mapnik") %>% #addTiles() %>%
# setView(lat = 39.8283, lng = -98.5795, zoom = 4) %>%
addPolygons(data = USA, stroke = T, smoothFactor = 0.2, fillOpacity = 0.8,
fillColor = ~mypal(temp$value), color = "#BDBDC3", weight = 1,
popup = paste("County: ", paste0(temp$NAME_2, ', ', temp$state), "<br>",
"Cases: ", temp$value, "<br>")) %>%
addLegend(position = "bottomleft", pal = mypal, values = temp$value,
title = "Cases",
opacity = 1)
sum(temp$value)
sum(mydata$value)
View(paste0(mydata$county, mydata$state)[!paste0(mydata$county, mydata$state) %in% paste0(temp$county, temp$state)])
table(paste(mydata$county, mydata$state) %in% paste(temp$county, temp$state))
View(paste(mydata$county, mydata$state)[!paste(mydata$county, mydata$state) %in% paste(temp$NAME_2, temp$state)])
mydata <- data.frame(state = dat$Province.State,
county = dat$Province.State,
value = dat[,ncol(dat)],
stringsAsFactors = FALSE)
mydata$state = sapply(mydata$county, function(x) unlist(strsplit(x, ', '))[2])
mydata$state = gsub('[.]', '', mydata$state)
mydata$county = sapply(mydata$county, function(x) unlist(strsplit(x, ', '))[1])
mydata$county = gsub(' County', '', mydata$county)
# mydata$county = gsub(' ', '', mydata$county)
mydata = na.omit(mydata)
mydata$county[mydata$county == 'Washington' & mydata$state == 'DC'] = 'District of Columbia'
sum(mydata$value)
temp <- merge(USA, mydata,
by.x = c("state", "NAME_2"), by.y = c("state", "county"),
all.x = TRUE)
temp$value[is.na(temp$value)] = 0
sum(temp$value)
View(paste(mydata$county, mydata$state)[!paste(mydata$county, mydata$state) %in% paste(temp$NAME_2, temp$state)])
mydata$county[mydata$county == ' Norfolk']
unique(USA$NAME_2[USA$state=='WI'])
mydata$county[mydata$county == ' Madison']
mydata$county[mydata$county == 'Madison']
mydata$county[mydata$county == 'San Antonio']
unique(USA$NAME_2[USA$state=='HI'])
unique(USA$NAME_2[USA$state=='OR'])
'Jackson' == 'Jackson'
unique(USA$NAME_2[USA$state=='MO'])
mydata$county[mydata$county == 'St. Louis']
mydata$county[mydata$county == 'San Antonio']
mydata$county[mydata$county == 'Madison']
mydata$county[mydata$county == ' Norfolk'] = 'Norfolk'
mydata$county[mydata$county == 'Madison'] = 'Dane'
mydata$county[mydata$county == 'San Antonio'] = 'Bexar'
mydata$county[mydata$county == 'St. Louis'] = 'Saint Louis'
mydata$county[mydata$county == 'Norfolk'] = 'Norfolk'
sum(mydata$value)
temp <- merge(USA, mydata,
by.x = c("state", "NAME_2"), by.y = c("state", "county"),
all.x = TRUE)
temp$value[is.na(temp$value)] = 0
sum(temp$value)
View(paste(mydata$county, mydata$state)[!paste(mydata$county, mydata$state) %in% paste(temp$NAME_2, temp$state)])
mydata$state[mydata$state == 'OR ']
mydata$state[mydata$state == 'OR '] = 'OR'
temp <- merge(USA, mydata,
by.x = c("state", "NAME_2"), by.y = c("state", "county"),
all.x = TRUE)
temp$value[is.na(temp$value)] = 0
sum(temp$value)
View(paste(mydata$county, mydata$state)[!paste(mydata$county, mydata$state) %in% paste(temp$NAME_2, temp$state)])
# Create a color palette
mypal <- colorBin(palette = "Reds", bins = sort(unique(mydata$value)), domain = temp$value, na.color = NA) #colorQuantile("Reds", NULL, n = 5) # #
leaflet() %>%
addProviderTiles("OpenStreetMap.Mapnik") %>% #addTiles() %>%
# setView(lat = 39.8283, lng = -98.5795, zoom = 4) %>%
addPolygons(data = USA, stroke = T, smoothFactor = 0.2, fillOpacity = 0.8,
fillColor = ~mypal(temp$value), color = "#BDBDC3", weight = 1,
popup = paste("County: ", paste0(temp$NAME_2, ', ', temp$state), "<br>",
"Cases: ", temp$value, "<br>")) %>%
addLegend(position = "bottomleft", pal = mypal, values = temp$value,
title = "Cases",
opacity = 1)
mydata = rbind(mydata, data.frame('OH', 'Cuyahoga', 3))
mydata = rbind(mydata, data.frame(state = 'OH', county = 'Cuyahoga', value = 3))
temp <- merge(USA, mydata,
by.x = c("state", "NAME_2"), by.y = c("state", "county"),
all.x = TRUE)
temp$value[is.na(temp$value)] = 0
sum(temp$value)
View(paste(mydata$county, mydata$state)[!paste(mydata$county, mydata$state) %in% paste(temp$NAME_2, temp$state)])
# Create a color palette
mypal <- colorBin(palette = "Reds", bins = sort(unique(mydata$value)), domain = temp$value, na.color = NA) #colorQuantile("Reds", NULL, n = 5) # #
leaflet() %>%
addProviderTiles("OpenStreetMap.Mapnik") %>% #addTiles() %>%
# setView(lat = 39.8283, lng = -98.5795, zoom = 4) %>%
addPolygons(data = USA, stroke = T, smoothFactor = 0.2, fillOpacity = 0.8,
fillColor = ~mypal(temp$value), color = "#BDBDC3", weight = 1,
popup = paste("County: ", paste0(temp$NAME_2, ', ', temp$state), "<br>",
"Cases: ", temp$value, "<br>")) %>%
addLegend(position = "bottomleft", pal = mypal, values = temp$value,
title = "Cases",
opacity = 1)
mydata$value[mydata$state == 'PA' & mydata$county == 'Montgomery']
mydata = rbind(mydata, data.frame(state = 'PA', county = 'Monroe', value = 1))
mydata$value[mydata$state == 'PA' & mydata$county == 'Montgomery'] = 7
sum(mydata$value[mydata$state == 'PA'])
temp <- merge(USA, mydata,
by.x = c("state", "NAME_2"), by.y = c("state", "county"),
all.x = TRUE)
temp$value[is.na(temp$value)] = 0
sum(temp$value)
# Create a color palette
mypal <- colorBin(palette = "Reds", bins = sort(unique(mydata$value)), domain = temp$value, na.color = NA) #colorQuantile("Reds", NULL, n = 5) # #
leaflet() %>%
addProviderTiles("OpenStreetMap.Mapnik") %>% #addTiles() %>%
# setView(lat = 39.8283, lng = -98.5795, zoom = 4) %>%
addPolygons(data = USA, stroke = T, smoothFactor = 0.2, fillOpacity = 0.8,
fillColor = ~mypal(temp$value), color = "#BDBDC3", weight = 1,
popup = paste("County: ", paste0(temp$NAME_2, ', ', temp$state), "<br>",
"Cases: ", temp$value, "<br>")) %>%
addLegend(position = "bottomleft", pal = mypal, values = temp$value,
title = "Cases",
opacity = 1)
source('C:/Users/jbwang/Box/map_county_coronavirus.r')
unique(USA$NAME_2[USA$state=='LA'])
source('C:/Users/jbwang/Box/map_county_coronavirus.r')
table(USA$NAME_1)
print(leaflet() %>%
addProviderTiles("OpenStreetMap.Mapnik") %>% #addTiles() %>%
# setView(lat = 39.8283, lng = -98.5795, zoom = 4) %>%
addPolygons(data = temp, stroke = T, smoothFactor = 0.2, fillOpacity = 0.8,
fillColor = ~mypal(temp$value), color = "#BDBDC3", weight = 1,
popup = paste("County: ", paste0(temp$NAME_2, ', ', temp$state), "<br>",
"Cases: ", temp$value, "<br>")) %>%
addLegend(position = "bottomleft", pal = mypal, values = temp$value,
title = "Cases",
opacity = 1))
unique(USA$NAME_2[USA$state=='NY'])
unique(USA$NAME_2[USA$state=='CT'])
unique(USA$NAME_2[USA$state=='MD'])
invisible(remDr$open())
library(rvest)
library(RSelenium)
remDr <- remoteDriver(browserName = "chrome")
invisible(remDr$open())
invisible(tmp <- remDr$open())
tmp <- capture.output(remDr$open())
?remoteDriver
remDr$close()
?addPolygons
library(shiny)
library(leaflet)
ui <- fluidPage(
leafletOutput("mymap"),
p(),
actionButton("recalc", "New points")
)
server <- function(input, output, session) {
points <- eventReactive(input$recalc, {
cbind(rnorm(40) * 2 + 13, rnorm(40) + 48)
}, ignoreNULL = FALSE)
output$mymap <- renderLeaflet({
leaflet() %>%
addProviderTiles(providers$Stamen.TonerLite,
options = providerTileOptions(noWrap = TRUE)
) %>%
addMarkers(data = points())
})
}
shinyApp(ui, server)
rm(list = ls())
source('map_county_coronavirus.r')
dat <- get_county_cases()
dat$cases[dat$state == 'Kentucky' & dat$county == 'Fayette'] = sum(dat$cases[dat$state == 'Kentucky' & dat$county == 'Fayette'])
dat = dat[-which(dat$state == 'Kentucky' & dat$county == 'Fayette')[2],]
# dat$cases[dat$state == 'New York' & dat$county == 'New York'] = dat$cases[dat$state == 'New York' & dat$county == 'New York'] +
#   dat$cases[dat$state == 'New York' & dat$county == 'New York City']
# dat = dat[-which(dat$state == 'New York' & dat$county == 'New York City'),]
dat$county[dat$state == 'Connecticut' & dat$county == 'Wilton'] = 'Fairfield'
dat$county[dat$state == 'South Carolina' & dat$county == 'Camden'] = 'Kershaw'
dat$county[dat$state == 'Maryland' & dat$county == 'Prince George'] = "Prince George's"
dat$state[dat$state == 'Diamond Princess' & dat$county == 'Bexar'] = "Texas"
dat$cases[dat$state == 'South Carolina' & dat$county == 'Kershaw'] = sum(dat$cases[dat$state == 'South Carolina' & dat$county == 'Kershaw'])
dat = dat[-which(dat$state == 'South Carolina' & dat$county == 'Kershaw')[2],]
dat[which(duplicated(dat[,-3])),]
source('C:\\Users\\jbwang\\Box\\map_county_coronavirus.r')
dat <- get_county_cases()
dat$cases[dat$state == 'Kentucky' & dat$county == 'Fayette'] = sum(dat$cases[dat$state == 'Kentucky' & dat$county == 'Fayette'])
dat = dat[-which(dat$state == 'Kentucky' & dat$county == 'Fayette')[2],]
# dat$cases[dat$state == 'New York' & dat$county == 'New York'] = dat$cases[dat$state == 'New York' & dat$county == 'New York'] +
#   dat$cases[dat$state == 'New York' & dat$county == 'New York City']
# dat = dat[-which(dat$state == 'New York' & dat$county == 'New York City'),]
dat$county[dat$state == 'Connecticut' & dat$county == 'Wilton'] = 'Fairfield'
dat$county[dat$state == 'South Carolina' & dat$county == 'Camden'] = 'Kershaw'
dat$county[dat$state == 'Maryland' & dat$county == 'Prince George'] = "Prince George's"
dat$state[dat$state == 'Diamond Princess' & dat$county == 'Bexar'] = "Texas"
dat$cases[dat$state == 'South Carolina' & dat$county == 'Kershaw'] = sum(dat$cases[dat$state == 'South Carolina' & dat$county == 'Kershaw'])
dat = dat[-which(dat$state == 'South Carolina' & dat$county == 'Kershaw')[2],]
dat[which(duplicated(dat[,-3])),]
map = map(dat)
remDr <- remoteDriver(browserName = "chrome")
tmp <- capture.output(remDr$open())
remDr$navigate("https://coronavirus.1point3acres.com/en")
webElem <- remDr$findElement(using = "xpath", '//*[@id="map"]/div[2]/div[1]/div[4]/div/div/div/div/div[1]/table/tbody')
read_html(webElem$getElementAttribute("outerHTML")[[1]]) %>% html_text()
clickElement
?clickElement
library(RSelenium)
?mouseMoveToLocation
remDr$mouseMoveToLocation(500, 1e3)
remDr <- remoteDriver(browserName = "chrome")
tmp <- capture.output(remDr$open())
# webElem <- remDr$findElement(using = "xpath", "/html/body/div[3]/div[2]/div[1]/div[2]/div[2]/div[1]/ul/li[4]")
remDr$navigate("https://coronavirus.1point3acres.com/en")
remDr$mouseMoveToLocation(500, 1e3)
rm(list = ls())
source('C:\\Users\\jbwang\\Box\\map_county_coronavirus.r')
dat <- get_county_cases()
dat$cases[dat$state == 'Kentucky' & dat$county == 'Fayette'] = sum(dat$cases[dat$state == 'Kentucky' & dat$county == 'Fayette'])
dat = dat[-which(dat$state == 'Kentucky' & dat$county == 'Fayette')[2],]
# dat$cases[dat$state == 'New York' & dat$county == 'New York'] = dat$cases[dat$state == 'New York' & dat$county == 'New York'] +
#   dat$cases[dat$state == 'New York' & dat$county == 'New York City']
# dat = dat[-which(dat$state == 'New York' & dat$county == 'New York City'),]
dat$county[dat$state == 'Connecticut' & dat$county == 'Wilton'] = 'Fairfield'
dat$county[dat$state == 'South Carolina' & dat$county == 'Camden'] = 'Kershaw'
dat$county[dat$state == 'Maryland' & dat$county == 'Prince George'] = "Prince George's"
dat$state[dat$state == 'Diamond Princess' & dat$county == 'Bexar'] = "Texas"
dat$cases[dat$state == 'South Carolina' & dat$county == 'Kershaw'] = sum(dat$cases[dat$state == 'South Carolina' & dat$county == 'Kershaw'])
dat = dat[-which(dat$state == 'South Carolina' & dat$county == 'Kershaw')[2],]
dat[which(duplicated(dat[,-3])),]
# write.csv(dat, file = 'C:\\Users\\jbwang\\Dropbox\\coronavirus.csv', row.names = F)
map = map(dat)
source('C:\\Users\\jbwang\\Box\\map_county_coronavirus.r')
while(a = 1) dat <- get_county_cases()
while(a == 1) dat <- get_county_cases()
while(1 == 0) dat <- get_county_cases()
while(1 == 1) dat <- get_county_cases()
System.time()
Sys.time()
source('C:\\Users\\jbwang\\Box\\map_county_coronavirus.r')
while(1 == 1) dat <- get_county_cases()
paste('a', 'b', 'c')
source('C:\\Users\\jbwang\\Box\\map_county_coronavirus.r')
while(1 == 1) dat <- get_county_cases()
?Sys.sleep
source('C:\\Users\\jbwang\\Box\\map_county_coronavirus.r')
while(1 == 1) {
dat <- get_county_cases()
Sys.sleep(1800)
}
webElem <- remDr$findElement(using = "xpath", '//*[@id="stat"]/div/div[1]/div[2]/section[1]/strong')
remDr <- remoteDriver(browserName = "chrome")
tmp <- capture.output(remDr$open())
remDr$navigate("https://coronavirus.1point3acres.com/en")
webElem <- remDr$findElement(using = "xpath", '//*[@id="stat"]/div/div[1]/div[2]/section[1]/strong')
as.numeric(read_html(webElem$getElementAttribute("outerHTML")[[1]]) %>% html_text())
xpath0 = '//*[@id="map"]/div[2]/div[1]/div[3]'
state = get_rowname(xpath0, remDr)
state[1] = gsub('LocationConfirmedNew CasesDeaths', '', state[1])
state[1] = gsub('LocationConfirmedNewDeaths', '', state[1])
grep('Penn', state)
rm(list = ls())
source('C:\\Users\\jbwang\\Box\\map_county_coronavirus.r')
while(1 == 1) {
get_total()
Sys.sleep(1800)
}
rm(list = ls())
source('C:\\Users\\jbwang\\Box\\map_county_coronavirus.r')
while(1 == 1) {
get_total()
Sys.sleep(1800)
}
rm(list = ls())
source('C:\\Users\\jbwang\\Box\\map_county_coronavirus.r')
while(1 == 1) {
get_total()
Sys.sleep(1800)
}
rm(list = ls())
source('C:\\Users\\jbwang\\Box\\map_county_coronavirus.r')
while(1 == 1) {
get_total()
Sys.sleep(1800)
}
dat = readLines('https://coronavirus.1point3acres.com/en', encoding  = 'UTF-8')
grep('808',dat)
dat[8]
dat[8] = gsub('              </script><meta name=\"viewport\" content=\"width=device-width,minimum-scale=1,initial-scale=1\" /><meta charSet=\"utf-8\" /><title>COVID-19/Coronavirus Real Time Updates With Credible Sources in US and Canada | 1Point3Acres</title><meta name=\"robots\" content=\"index,follow\" /><meta name=\"googlebot\" content=\"index,follow\" /><meta name=\"description\" content=\"Live updates of Coronavirus Disease 2019 (COVID-19) in U.S. and Canada. Util 2020-03-10 17:56, there are ',
'', dat[8])
dat[8]
install.packages("qdapRegex")
library(qdapRegex)
rm_between(dat[8], 'There are', 'confirmed', extract=TRUE)[[1]]
rm_between(dat[8], 'there are', 'confirmed', extract=TRUE)[[1]]
rm_between(dat[8], 'there are', 'confirmed', extract=TRUE)[[1]][1]
dat = readLines('https://coronavirus.1point3acres.com/en', encoding  = 'UTF-8')
grep('808',dat)
rm_between(dat[8], 'there are', 'confirmed', extract=TRUE)[[1]][1]
grep('there are',dat)
dat = readLines('https://coronavirus.1point3acres.com/en', encoding  = 'UTF-8')
rm_between(dat[grep('there are',dat)], 'there are', 'confirmed', extract=TRUE)[[1]][1]
dat[grep('there are',dat)]
grep('Deaths', dat)
grep('deaths', dat)
grep('death', dat)
grep('Penn', dat)
grep('死', dat)
rm_between(dat[grep('死',dat)[死]], '', '死', extract=TRUE)[[1]][1]
rm_between(dat[grep('死',dat)[1]], '', '死', extract=TRUE)[[1]][1]
dat[grep('死',dat)]
grep('28', dat)
grep('死',dat)
rm(list = ls())
source('C:\\Users\\jbwang\\Box\\map_county_coronavirus.r')
total0 = rep(0, 4)
while(1 == 1) {
total = get_total(total0 = total0)
total0 = total
# Sys.sleep(1800)
}
rm(list = ls())
source('C:\\Users\\jbwang\\Box\\map_county_coronavirus.r')
total0 = rep(0, 4)
while(1 == 1) {
total = get_total(total0 = total0)
total0 = total
# Sys.sleep(1800)
}
rm(list = ls())
source('C:\\Users\\jbwang\\Box\\map_county_coronavirus.r')
total0 = rep(0, 4)
while(1 == 1) {
total = get_total(total0 = total0)
total0 = total
Sys.sleep(60*5)
}
rm(list = ls())
source('C:\\Users\\jbwang\\Box\\map_county_coronavirus.r')
total0 = rep(0, 4)
while(1 == 1) {
total = get_total(total0 = total0)
total0 = total
Sys.sleep(60*5)
}
devtools::install_github('Lchiffon/leafletCN')
install.packages('digest')
devtools::install_github('Lchiffon/leafletCN')
install.packages('rlang')
install.packages("rlang")
devtools::install_github('Lchiffon/leafletCN')
install.packages("vctrs")
setwd('C:\\Users\\jbwang\\Documents\\GitHub\\COVID-19-US-county-map\\')
source('C:\\Users\\jbwang\\Box\\map_county_coronavirus.r')
update()
setwd('C:\\Users\\jbwang\\Documents\\GitHub\\COVID-19-US-county-map\\')
source('C:\\Users\\jbwang\\Box\\map_county_coronavirus.r')
update()
